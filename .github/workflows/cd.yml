name: "Continuous Deployment"

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches:
      - main
  # push:
  #   branches: [main]
  #   paths-ignore:
  #     - "migrations/"
  #     - "*.txt"
  #     - "*.md"
  #     - "infra/"
  #     - ".github/**"

  # pull_request:
  #   branches: [main]
  #   paths-ignore:
  #     - "migrations/**"
  #     - "*.txt"
  #     - "*.md"
  #     - "infra/**"
  #     - ".github/**"

jobs:
  Build_Publish:
    name: Push Docker image to Docker Hub, GHCR and ECR
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        # with:
        #   ref: ${{ needs.Pre-Deployment.outputs.pr_number}}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_OICD_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata (tags, labels) for Docker (Docker Hub, GHCR and ECR)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            merch7x/flask-blog
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/flask-blog
          tags: |
            latest

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Create_Infrastructure:
  #   defaults:
  #     run:
  #       working-directory: infra/env/prod/
  #   permissions:
  #     pull-requests: write
  #   runs-on: ubuntu-latest
  #   needs: Build_Publish
  #   env:
  #     TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     TF_VAR_image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/flask-blog:latest
  #   steps:
  #     - name: Checkout infra branch
  #       uses: actions/checkout@v4
  #       with:
  #         ref: infra

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.9.2
  #         cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}

  #     - name: Terraform fmt
  #       id: fmt
  #       run: terraform fmt -check
  #       continue-on-error: true

  #     - name: Terraform Init
  #       id: init
  #       run: terraform init

  #     - name: Terraform Validate
  #       id: validate
  #       run: terraform validate -no-color

  #     - name: Terraform Plan
  #       id: plan
  #       run: terraform plan -no-color
  #       continue-on-error: true

  #     # - name: Update PR
  #     #   uses: actions/github-script@v7
  #     #   env:
  #     #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  #     #   with:
  #     #     github-token: ${{ secrets.GITHUB_TOKEN }}
  #     #     script: |
  #     #       const prNumber = parseInt("${{ github.event.inputs.PR_number }}", 10);
  #     #       if (!prNumber) {
  #     #         throw new Error("Pull request number is missing.");
  #     #         }
  #     #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
  #     #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
  #     #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
  #     #       <details><summary>Validation Output</summary>

  #     #       \`\`\`\n
  #     #       ${{ steps.validate.outputs.stdout }}
  #     #       \`\`\`

  #     #       </details>

  #     #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

  #     #       <details><summary>Show Plan</summary>

  #     #       \`\`\`\n
  #     #       ${process.env.PLAN}
  #     #       \`\`\`

  #     #       </details>

  #     #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

  #     #       await github.rest.issues.createComment({
  #     #         issue_number: prNumber,
  #     #         owner: context.repo.owner,
  #     #         repo: context.repo.repo,
  #     #         body: output
  #     #       })

  #     - name: Terraform Plan Status
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1

  #     - name: Terraform Apply
  #       id: apply
  #       run: terraform apply -auto-approve
